<?php

define('SOMI_MODULE_PATH', drupal_get_path('module', 'somi'));

const SOMI_TOP_CRYSTALLS_PER_MONTH_DEBET_LIMIT = 50;
const SOMI_CORE_CRYSTALLS_PER_MONTH_DEBET_LIMIT = 30;
const SOMI_ACTIVE_CRYSTALLS_PER_MONTH_DEBET_LIMIT = 20;
const SOMI_REGULAR_CRYSTALLS_PER_MONTH_DEBET_LIMIT = 10;

require_once "somi.field.inc";

/**
 * Implements hook_menu.
 */
function somi_menu() {
  $items = array();
  $items['manager'] = array(
    'title' => 'Manager',
    'page callback' => 'somi_manager',
//    'theme callback' => 'ajax_base_page_theme',
//    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'description' => 'Ajax callback for view loading.',
    'type' => MENU_CALLBACK,
    'file' => 'somi.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function somi_entity_info_alter(&$entity_info) {
  $view_modes = array(
    'user' => array(
      'teaser',
    ),
  );

  foreach ($view_modes as $key => $entity_type) {
    foreach ($entity_type as $mode) {
      $entity_info[$key]['view modes'][$mode] = array(
        'label' => t(drupal_ucfirst(str_replace('_', ' ', $mode))),
        'custom settings' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function somi_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools') || ($module == 'panels') || ($module == 'feeds_tamper')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_api().
 */
function somi_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => SOMI_MODULE_PATH . '/views',
  );
}

/**
* Implements hook_ctools_plugin_api().
 */
function somi_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels') {
    return array('version' => 2.0);
  }
}

/**
 * @param $uid
 * @param $value
 * @param string $vote_type
 */
function somi_add_user_crystalls($uid, $value, $vote_type = 'crystalls') {
  $vote = array(
    'value' => $value,
    'value_type' => $vote_type,
    'entity_type' => 'user',
    'entity_id' => $uid,
  );

  $criteria = array(
    'entity_type' => 'user',
    'entity_id' => $uid,
    'value_type' => $vote_type,
  );

  if (!$uid) {
    $criteria += array(
      'vote_source' => ip_address(),
    );
  }

  $votes[] = $vote;
  $criterias[] = $criteria;

  votingapi_add_votes($votes, $criterias);

  votingapi_recalculate_results('user', $uid, TRUE);
}

/**
 * @param $uid
 * @param $value
 * @param string $vote_type
 */
function somi_set_user_crystalls($uid, $value, $vote_type = 'crystalls', $source_uid = NULL) {
  $vote = array(
    'value' => $value,
    'value_type' => $vote_type,
    'entity_type' => 'user',
    'entity_id' => $uid,
  );

  $criteria = array(
    'entity_type' => 'user',
    'entity_id' => $uid,
    'value_type' => $vote_type,
  );

  if (!$source_uid) {
    $criteria += array(
      'vote_source' => ip_address(),
    );
  }

  var_dump([$uid, $vote, $source_uid]);
  $votes[] = $vote;
  $criterias[] = $criteria;

  votingapi_set_votes($votes, $criterias);

  votingapi_recalculate_results('user', $uid, TRUE);
}

/**
 * @param $uid
 * @param string $vote_type
 * @return mixed
 */
function somi_get_user_crystalls($uid, $vote_type = 'crystalls') {
  $storage = &drupal_static(__FUNCTION__);

  if (!isset($storage[$vote_type][$uid])) {
    $crystalls_count = votingapi_select_results(
      array(
        'entity_id' => $uid,
        'entity_type' => 'user',
        'value_type' => $vote_type,
      )
    );

    if (!empty($crystalls_count[2])) {
      $crystalls_count = $crystalls_count[2]['value'];

    }
    else {
      $crystalls_count = 0;
    }

    $storage[$vote_type][$uid] = $crystalls_count;
  }

  return $storage[$vote_type][$uid];
}